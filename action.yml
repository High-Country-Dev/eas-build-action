name: "EAS Build"
description: "Run EAS Build for Expo projects in a monorepo using pnpm"
inputs:
  project_path:
    description: "Path to the Expo project within the monorepo"
    required: true
    default: "apps/expo"
  github-token:
    description: "GitHub token"
    required: true
  expo-token:
    description: "Expo token"
    required: true
  node-version:
    description: "Optional node version. Default is 18"
    default: "18"
  pnpm-version:
    description: "Optional pnpm version. Default is 8.15.4"
    default: "8.15.4"

runs:
  using: "composite"
  steps:
    - name: Check for EXPO_TOKEN
      shell: bash
      run: |
        if [ -z "${{ inputs.expo-token }}" ]; then
          echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install pnpm
      shell: bash
      run: npm install -g pnpm@${{ inputs.pnpm-version }}

    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ inputs.expo-token }}

    - name: Install dependencies
      shell: bash
      run: |
        cd ${{ inputs.project_path }}
        pnpm install

    - name: Install sponge, imagemagick etc
      shell: bash
      run: sudo apt-get install -y moreutils imagemagick ghostscript fonts-freefont-otf expect

    - name: Get version numbers
      shell: bash
      run: |
        cd ${{ inputs.project_path }}
        ANDROID_VERSION=$(pnpm -F expo exec eas build:version:get --platform android | grep "Android versionCode" | awk '{print $NF}')
        IOS_VERSION=$(pnpm -F expo exec eas build:version:get --platform ios | grep "iOS buildNumber" | awk '{print $NF}')
        CURRENT_VERSION=$(( ANDROID_VERSION > IOS_VERSION ? ANDROID_VERSION : IOS_VERSION ))
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "CURRENT VERSION IS ${CURRENT_VERSION}"

    - name: Set to latest version number
      shell: bash
      run: |
        for platform in ios android
        do
          expect << EOF
          set timeout -1
          spawn pnpm -F expo exec eas build:version:set --platform $platform
          expect "What version would you like to set?"
          send "$CURRENT_VERSION\r"
          expect eof
        EOF
        done

    - name: EAS Build
      shell: bash
      run: |
        cd ${{ inputs.project_path }}

        # Get the keys and determine the correct environment name
        EAS_KEYS=$(jq -r '.build | keys[]' eas.json)
        EAS_ENV_DEV=`echo "$EAS_KEYS" | grep -E "^(dev|develop|development)$" | head -n 1` 
        EAS_ENV_STG=`echo "$EAS_KEYS" | grep -E "^(stg|stage|staging)$" | head -n 1` 
        EAS_ENV_PRD=`echo "$EAS_KEYS" | grep -E "^(prd|prod|production)$" | head -n 1` 
        EAS_ENV_FTE=`echo "$EAS_KEYS" | grep -E "^(fte|feat|feature)$" | head -n 1` 

        echo "EAS_ENV_DEV: $EAS_ENV_DEV"
        echo "EAS_ENV_STG: $EAS_ENV_STG"
        echo "EAS_ENV_PRD: $EAS_ENV_PRD"
        echo "EAS_ENV_FTE: $EAS_ENV_FTE"

        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "CHANNEL=prod" >> $GITHUB_ENV
          eas build --platform all --profile $EAS_ENV_PRD --no-wait --auto-submit --non-interactive
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "CHANNEL=staging" >> $GITHUB_ENV
          eas build --platform all --profile $EAS_ENV_STG --no-wait --auto-submit --non-interactive
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "CHANNEL=dev" >> $GITHUB_ENV
          eas build --platform all --profile $EAS_ENV_DEV --no-wait --auto-submit --non-interactive
        elif [ ! -z "${{ github.event.pull_request }}" ]; then
          # Get public name from PR title
          ID=$(echo ${{ github.event.pull_request.title }} | grep -oP '\[MD-\K[0-9]+')   
          echo "Got id $ID"

          if [ -z "$ID" ]; then
            CHANNEL=feat
          else
            CHANNEL=feat-$ID
          fi
          echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV
          echo "CHANNEL IS $CHANNEL"

          PROJECT_NAME="${{ github.event.repository.name }}"
          PUBLIC_NAME="${PROJECT_NAME^} $ID"
          PR="${{ github.event.number }}"          
          jq --arg a "$PUBLIC_NAME" '.build.feature.env.EXPO_PUBLIC_NAME = $a' eas.json | sponge eas.json

          COMMENTS=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.github-token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments?per_page=50)

          # Get API URL from Vercel bot PR comment
          BODY=$(echo $COMMENTS | jq '.[] | select(.user.login == "vercel[bot]") | .body')
          LINK=$(echo $BODY | grep -oP '\| \[Visit Preview]\(\K[^\)]+') 
          URL=$(curl -Ls -o /dev/null -w %{url_effective} $LINK)
          API_URL="https://$(echo $URL | cut -d/ -f3)"
          jq --arg a "$API_URL" '.build.feature.env.EXPO_PUBLIC_API_URL = $a' eas.json | sponge eas.json
          echo "API URL: $API_URL"

          # Update app icon
          ICON_PATH=$(jq '.build.feature.env.EXPO_PUBLIC_ICON' eas.json | tr -d '"')
          ADAPTIVE_ICON_PATH=$(jq '.build.feature.env.EXPO_PUBLIC_ADAPTIVE_ICON' eas.json | tr -d '"')
          convert $ICON_PATH -pointsize 378 -fill white -gravity center -stroke black -strokewidth 5 -draw "rotate -45 text 0,0 '$ID'" "$ICON_PATH"
          convert $ADAPTIVE_ICON_PATH -pointsize 378 -fill white -gravity center -stroke black -strokewidth 5 -draw "rotate -45 text 0,0 '$ID'" "$ADAPTIVE_ICON_PATH"
          echo "ICON_PATH: $ICON_PATH"

          echo "EAS BUILD COMMAND: eas build --platform all --profile $EAS_ENV_FTE --no-wait --non-interactive"

          EAS_STDOUT=$(eas build --platform all --profile $EAS_ENV_FTE --no-wait --non-interactive 2>&1)
          EAS_EXIT_CODE=$?

          echo "EAS Build Output:"
          echo "$EAS_STDOUT"

          if [ $EAS_EXIT_CODE -ne 0 ]; then
            echo "EAS build failed with exit code $EAS_EXIT_CODE"
            exit $EAS_EXIT_CODE
          fi

          ANDROID_BUILD_LINK=$(echo $EAS_STDOUT | grep -oP 'Android build details: \K[^ )]+')
          echo "ANDROID_BUILD_LINK=$ANDROID_BUILD_LINK" >> $GITHUB_ENV
          echo "ANDROID_BUILD_LINK IS ${ANDROID_BUILD_LINK}"

          IOS_BUILD_LINK=$(echo $EAS_STDOUT | grep -oP 'iOS build details: \K[^ )]+') 
          echo "IOS_BUILD_LINK=$IOS_BUILD_LINK" >> $GITHUB_ENV
          echo "IOS_BUILD_LINK IS ${IOS_BUILD_LINK}"

          BUILD_COMMENT_ID=$(echo "$COMMENTS" | jq '.[] | select(.body | startswith("Most recent mobile feature builds:")) | .id' | tail -n1)

          if [ ! -z "$ANDROID_BUILD_LINK" ] || [ ! -z "$IOS_BUILD_LINK" ]; then
            if [ -z "$BUILD_COMMENT_ID" ]; then
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ inputs.github-token }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -d "{\"body\":\"Most recent mobile feature builds:\niOS build: $IOS_BUILD_LINK\nAndroid build: $ANDROID_BUILD_LINK\"}" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments
            else
              curl -L \
                -X PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ inputs.github-token }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -d "{\"body\":\"Most recent mobile feature builds:\niOS build: $IOS_BUILD_LINK\nAndroid build: $ANDROID_BUILD_LINK\"}" \
                https://api.github.com/repos/${{ github.repository }}/issues/comments/$BUILD_COMMENT_ID
            fi
          fi

        else
          # Get the keys
          echo "Branch not recognized for EAS build defaulting to production build with out auto submit"
          echo "CHANNEL=prod" >> $GITHUB_ENV
          eas build --platform all --profile $EAS_ENV_PRD --no-wait --non-interactive
        fi

    - name: Create tag
      shell: bash
      run: |
        git fetch --prune --unshallow --tags
        if [ ! -z "${{ github.event.pull_request }}" ]; then
          git checkout ${{ github.event.pull_request.head.sha }}
        fi
        # Add one since we incremented
        git tag build-$((CURRENT_VERSION+1))-${CHANNEL}
        git push origin build-$((CURRENT_VERSION+1))-${CHANNEL}
